service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_USER_ID_INDEX: Todos-UserIdIndex
    ATTACHMENT_S3_BUCKET: ${self:service}-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3600
    JWKS_ENDPOINT: https://dev-7vdkrp24711g5tqn.us.auth0.com/.well-known/jwks.json
    AUTH0_ISSUER: https://dev-7vdkrp24711g5tqn.us.auth0.com/
    AUTH0_AUDIENCE: https://dev-7vdkrp24711g5tqn.us.auth0.com/api/v2/

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


functions:

  Authorizer:
    handler: src/lambda/auth/authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
        Resource: !GetAtt TodosTable.Arn

  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors:
            origin: '*'
            methods: 
              - OPTIONS
              - POST
            allowCredentials: true
          authorizer: Authorizer
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt TodosTable.Arn

  # Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Authorizer
          cors:
            origin: '*'
            methods: 
              - OPTIONS
              - PATCH
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt TodosTable.Arn

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Authorizer
          cors:
            origin: '*'
            methods: 
              - OPTIONS
              - DELETE
            allowCredentials: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:DeleteItem'
        Resource: !GetAtt TodosTable.Arn


  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          cors:
            origin: '*'
            methods: 
              - OPTIONS
              - POST
            allowCredentials: true

          path: todos/{todoId}/attachment
          authorizer: Authorizer
    iamRoleStatements:
      - Action:
          - 's3:GetObject'
          - 's3:PutObject'
        Effect: Allow
        Resource: !GetAtt AttachmentsBucket.Arn

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
    
    #Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: 'HASH'
          - AttributeName: timestamp
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: 'HASH'
              - AttributeName: timestamp
                KeyType: 'RANGE'
            Projection:
              ProjectionType: ALL


    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: 
                - '*'
              AllowedMethods: 
                - 'GET'
              AllowedOrigins: 
                - '*'
              MaxAge: 3600

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 's3:GetObject'
              Effect: 'Allow'
              Principal: '*'
              Resource:
                - !Join
                  - ''
                  - - !GetAtt AttachmentsBucket.Arn
                    - /* 
